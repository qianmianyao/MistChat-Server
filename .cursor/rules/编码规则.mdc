---
description: 总是读取
globs: 
alwaysApply: false
---
---
description: 这是一份本项目的编码规则
globs: *.go
alwaysApply: true
---

## parchment-server 项目编码规则与注释规则

### 1. 目录结构规范

```
- 遵循标准 Go 项目结构：
  - api/：API 定义与路由
  - cmd/：应用入口点
  - config/：配置文件
  - docs/：文档
  - internal/：内部应用代码（非导出）
  - pkg/：可导出的公共库代码
```

### 2. 代码组织规范

1. **包命名规范**
   - 使用小写单词，不使用下划线或混合大小写
   - 包名应简短且有描述性（例如：models，services，handler）
   - 内部实现放在 internal/ 目录，对外提供的组件放在 pkg/ 目录

2. **文件组织规范**
   - 单一职责：每个文件应处理一个特定功能
   - 相关功能分组到同一目录（如 internal/services/chat/）
   - 测试文件使用 _test.go 后缀（如 find_test.go）

### 3. 代码风格规范

1. **命名规范**
   - 类型（结构体）：使用大写驼峰命名法（如 `WebSockerRouter`）
   - 方法/函数：使用大写驼峰（公开）或小写驼峰（内部）（如 `WsHandler`, `checkPassword`）
   - 常量：使用大写驼峰或全大写（如 `SuccessCode`）
   - 局部变量：使用小写驼峰命名法（如 `roomId`, `isprivate`）
   - 接口名：通常以 "er" 结尾（如果适用）

2. **导入格式**
   - 按照标准库、第三方库、本地包的顺序组织导入
   - 在组之间留一个空行
   - 不使用相对导入路径，总是使用完整包路径

3. **错误处理**
   - 总是检查并处理错误
   - 使用日志记录错误信息（使用 zap 日志库）
   - 返回有意义的错误信息
   - 在 API 处理器中使用统一的错误响应格式
   - 如果方法有错误返回,一定要处理错误
   - 错误处理如果在返回只有 err 的时候,使用 if err := func(); err != {} 的格式来处理

4. **代码格式**
   - 使用 gofmt/goimports 格式化代码
   - 缩进使用制表符（Tab）
   - 最大行长：适当控制，避免过长行
   - 括号风格：开括号不换行

我来帮您修改这个注释规范，减少过度注释的问题。以下是修改后的注释规范部分：

### 4. 注释规范

1. **包注释**
   - 每个包应在主文件（通常是与包同名的文件）开头有描述性注释

2. **函数/方法注释**
   - 所有导出的函数/方法必须有注释
   - 使用完整句子，简洁描述函数的主要功能、参数和返回值
   - 避免过度详细的步骤说明，专注于"做什么"和"为什么"

3. **类型注释**
   - 所有导出的类型（结构体、接口等）必须有注释
   - 描述类型的用途和重要属性

4. **API 文档注释**
   - 使用 Swagger 注释格式为 API 端点提供文档
   - 包含：Summary, Description, Tags, 参数描述, 响应代码说明

5. **代码内注释**
   - 仅对复杂或非直观的逻辑添加内联注释，解释原因（为什么）
   - 使用 `// 注释内容` 风格，而不是 `/* 注释内容 */`
   - 临时或需要后续修改的代码使用 `// TODO: 说明` 标记
   - 避免对明显的代码添加注释，不需要逐行注释
   - 注释应该增加理解价值，而非重复代码本身已表达的内容

### 5. 数据库模型规范

1. **模型定义**
   - 使用 GORM 标签定义数据库字段属性
   - 所有模型必须嵌入 `gorm.Model` 以包含标准字段 (ID, CreatedAt, UpdatedAt, DeletedAt)
   - 使用恰当的索引和约束（如唯一索引 `gorm:"uniqueIndex"`）
   - 遵循合理的命名约定（表名、字段名）

2. **数据访问层**
   - 将数据库访问逻辑封装在服务层中
   - 使用事务处理复杂操作
   - 记录数据库错误并优雅处理

### 6. API 设计规范

1. **路由设计**
   - RESTful 风格 API 设计
   - 版本化 API 路径（如 `/api/v1/...`）
   - 按资源类型分组路由

2. **请求/响应处理**
   - 使用统一的响应格式（Status, Message, Data）
   - 合理的错误状态码和消息
   - 请求数据绑定和验证

3. **身份验证/授权**
   - 实现适当的身份验证机制
   - 权限控制和访问检查

### 7. 测试规范

1. **单元测试**
   - 为核心逻辑编写单元测试
   - 测试文件与源文件放在同一目录
   - 使用表驱动测试风格

2. **测试覆盖率**
   - 关键组件应有足够的测试覆盖率
   - 使用模拟（mock）进行隔离测试

### 8. 日志规范

1. **使用结构化日志**
   - 使用 zap 日志库进行结构化日志记录
   - 合理使用日志级别（Debug, Info, Warn, Error）
   - 包含关键上下文信息（如请求 ID、用户 ID 等）

2. **错误日志**
   - 记录详细的错误信息，包括错误堆栈
   - 使用 `zap.Error(err)` 字段记录错误对象

### 9. 配置管理规范

1. **配置文件**
   - 使用 YAML 格式的配置文件
   - 支持不同环境的配置文件

2. **配置加载**
   - 在应用启动时集中加载配置
   - 提供合理的默认值

### 示例注释格式

```go
// Package handler 提供 HTTP 请求处理功能，负责接收请求并返回响应。
package handler

// UserHandler 处理与用户相关的 HTTP 请求。
// 包括用户注册、登录、查询用户信息等功能。
type UserHandler struct {
    userService *service.UserService
}

// Register 处理用户注册请求。
// 接收用户提交的注册信息，验证后创建新用户账户。
// 成功时返回用户基本信息和认证令牌。
func (h *UserHandler) Register(c *gin.Context) {
    // 实现逻辑...
}
```

### Swagger API 文档示例

```go
// CreateUser 创建用户
// @Summary 创建新用户
// @Description 创建一个新用户账户
// @Tags 用户管理
// @Accept json
// @Produce json
// @Param user body UserCreateRequest true "用户信息"
// @Success 200 {object} Response{data=UserResponse} "成功创建用户"
// @Failure 400 {object} Response "请求参数错误"
// @Router /users [post]
func (h *UserHandler) CreateUser(c *gin.Context) {
    // 实现逻辑...
}
```
